/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dev.futurepath.views;

import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.JPanel;

/**
 *
 * @author anselm
 */
public class SportsAppFrame extends javax.swing.JFrame {

    /**
     * Creates new form SportsAppFrame
     */
    public SportsAppFrame() {
        initComponents();
        
        Dimension d = new Dimension(640, 480);
        setSize(d);
        setPreferredSize(d);
        setMinimumSize(d);
        // add(new CreatePlayerPanel());
        // add( new DeletePlayerPanel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerPanel = new javax.swing.JPanel();
        BarraMenu = new javax.swing.JMenuBar();
        PlayerMenu = new javax.swing.JMenu();
        createPlayer = new javax.swing.JMenuItem();
        deletePlayer = new javax.swing.JMenuItem();
        listPlayers = new javax.swing.JMenuItem();
        updatePlayer = new javax.swing.JMenuItem();
        teamMenu = new javax.swing.JMenu();
        createTeam = new javax.swing.JMenuItem();
        listTeams = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        containerPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(containerPanel, java.awt.BorderLayout.CENTER);

        PlayerMenu.setText("Player");

        createPlayer.setText("Create Player");
        createPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPlayerActionPerformed(evt);
            }
        });
        PlayerMenu.add(createPlayer);

        deletePlayer.setText("Delete Player");
        deletePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlayerActionPerformed(evt);
            }
        });
        PlayerMenu.add(deletePlayer);

        listPlayers.setText("List Players");
        listPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPlayersActionPerformed(evt);
            }
        });
        PlayerMenu.add(listPlayers);

        updatePlayer.setText("Update Player");
        updatePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePlayerActionPerformed(evt);
            }
        });
        PlayerMenu.add(updatePlayer);

        BarraMenu.add(PlayerMenu);

        teamMenu.setText("Teams");
        teamMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamMenuActionPerformed(evt);
            }
        });

        createTeam.setText("Create Team");
        createTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTeamActionPerformed(evt);
            }
        });
        teamMenu.add(createTeam);

        listTeams.setText("List Teams");
        listTeams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listTeamsActionPerformed(evt);
            }
        });
        teamMenu.add(listTeams);

        BarraMenu.add(teamMenu);

        setJMenuBar(BarraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deletePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlayerActionPerformed
        // PARA BORRAR AQUI
        DeletePlayerPanel panelito = new DeletePlayerPanel();
        add(panelito);
        loadPanel(panelito);
    }//GEN-LAST:event_deletePlayerActionPerformed

    private void createPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPlayerActionPerformed
        CreatePlayerPanel panelito = new CreatePlayerPanel();
        // add(new CreatePlayerPanel());
        add(panelito);
        loadPanel(panelito);

        // add( loadPanel((new CreatePlayerPanel())));
    }//GEN-LAST:event_createPlayerActionPerformed

    private void listPlayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPlayersActionPerformed
        // TODO add your handling code here:
       // ListPlayersPanel panelito = new ListPlayersPanel();
       ListPlayers2Panel panelito = new ListPlayers2Panel();
        add(panelito);
        loadPanel(panelito);

    }//GEN-LAST:event_listPlayersActionPerformed

    private void updatePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePlayerActionPerformed
        // update player
        UpdatePlayersPanel panelito = new UpdatePlayersPanel();
        add(panelito);
        loadPanel(panelito);

        
    }//GEN-LAST:event_updatePlayerActionPerformed

    private void teamMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamMenuActionPerformed
        // llamar al controlador aqui
    }//GEN-LAST:event_teamMenuActionPerformed

    private void createTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTeamActionPerformed
        // creates a team
        CreateTeamPanel panel = new CreateTeamPanel();
        add(panel);
        loadPanel(panel);
    }//GEN-LAST:event_createTeamActionPerformed

    private void listTeamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listTeamsActionPerformed
        // lists teams
        ListTeamPanel panel = new ListTeamPanel();
        add(panel);
        loadPanel(panel);
    }//GEN-LAST:event_listTeamsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SportsAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SportsAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SportsAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SportsAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SportsAppFrame().setVisible(true);
            }
        });
    }

    private void loadPanel(JPanel panelToLoad) {
        containerPanel.removeAll();
        containerPanel.setLayout(new BorderLayout());
        containerPanel.add(panelToLoad, BorderLayout.CENTER);
        pack();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar BarraMenu;
    private javax.swing.JMenu PlayerMenu;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JMenuItem createPlayer;
    private javax.swing.JMenuItem createTeam;
    private javax.swing.JMenuItem deletePlayer;
    private javax.swing.JMenuItem listPlayers;
    private javax.swing.JMenuItem listTeams;
    private javax.swing.JMenu teamMenu;
    private javax.swing.JMenuItem updatePlayer;
    // End of variables declaration//GEN-END:variables
}
